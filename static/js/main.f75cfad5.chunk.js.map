{"version":3,"sources":["components/Header/Header.js","components/CreateReleaseForm/CreateReleaseForm.js","components/EditReleaseForm/EditReleaseForm.js","components/EditTaskForm/EditTaskForm.js","components/CreateTaskForm/CreateTaskForm.js","components/ReleaseComponent/ReleaseComponent.js","components/ReleaseContainer/ReleaseContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","CreateReleaseForm","props","useState","versionName","setVersionName","versionNameError","setVersionNameError","startDate","setStartDate","startDateError","setStartDateError","releaseDate","setReleaseDate","releaseDateError","setReleaseDateError","description","setDescription","descriptionError","setDescriptionError","_onFocus","e","currentTarget","type","_onBlur","onSubmit","preventDefault","length","Date","parse","console","log","setReleases","releases","progress","tasks","alert","style","width","placeholder","value","onChange","target","onFocus","onBlur","EditReleaseForm","setProgress","progressError","setProgressError","useEffect","currentRelease","updatedRelease","index","setShowReleaseEditModal","marginRight","min","max","EditTaskForm","endDate","setEndDate","currentTask","updatedTask","taskIndex","setShowEditTaskModal","CreateTaskForm","makeid","text","possible","i","charAt","Math","floor","random","newTask","setShowCreateTaskModal","setShowReleaseTasks","ReleaseComponent","showReleaseTasks","showEditTaskModal","showCreateTaskModal","showActionMenu","setShowActionMenu","showReleaseEditModal","currentTaskIndex","setCurrentTaskIndex","ref","useRef","handler","listener","event","current","contains","document","addEventListener","removeEventListener","useOnClickOutside","Fragment","key","release","cursor","onDragStart","data","dataTransfer","setData","JSON","stringify","onReleaseDragStart","draggable","onDragOver","onReleaseDragOver","onDrop","msg","draggedData","getData","dropDataVersionName","children","innerText","dropDataDescription","updatedReleasesData","draggedDataIndex","findIndex","element","dropDataIndex","splice","onReleaseDrop","onClick","backgroundColor","fontSize","fontWeight","color","updatedReleasesList","filter","map","task","parseInt","colSpan","isOpen","onRequestClose","content","top","left","right","bottom","transform","ReleaseContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f75cfad5.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n    return (\n        <div className=\"headerContainer\">\n            <div className=\"headerText\" id=\"ProjectNameHeader\">\n                Projects / ENV 1.5\n            </div>\n            <div className=\"headerText\">\n                <h3>Releases</h3>\n            </div>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport \"./CreateReleaseForm.css\";\n\nexport default function CreateReleaseForm(props) {\n    const [versionName, setVersionName] = useState('')\n    const [versionNameError, setVersionNameError] = useState(false)\n    const [startDate, setStartDate] = useState('')\n    const [startDateError, setStartDateError] = useState(false)\n    const [releaseDate, setReleaseDate] = useState('')\n    const [releaseDateError, setReleaseDateError] = useState(false)\n    const [description, setDescription] = useState('')\n    const [descriptionError, setDescriptionError] = useState(false)\n\n    const addRelease = (e) => {\n        e.preventDefault();\n\n        if (versionName.length !== 0 && startDate.length !== 0 && releaseDate.length !== 0 && description.length !== 0 && Date.parse(startDate) <= Date.parse(releaseDate)) {\n            console.log(\"asdfgjhgsahj\")\n            props.setReleases([...props.releases, {\n                versionName,\n                startDate,\n                releaseDate,\n                description,\n                progress: 0,\n                tasks: []\n            }]);\n\n            setVersionName(\"\");\n            setStartDate(\"\");\n            setReleaseDate(\"\");\n            setDescription(\"\");\n        }\n        else {\n            if (versionName.length === 0) {\n                setVersionNameError(true)\n            }\n\n            if (startDate.length === 0) {\n                setStartDateError(true)\n            }\n\n            if (startDate.length !== 0 && releaseDate.length !== 0) {\n                if (Date.parse(startDate) > Date.parse(releaseDate)) {\n                    setStartDate(\"\");\n                    setReleaseDate(\"\");\n                    alert(\"Start date cannot be greater than release date.\")\n                }\n            }\n\n            if (releaseDate.length === 0) {\n                setReleaseDateError(true)\n            }\n\n            if (description.length === 0) {\n                setDescriptionError(true)\n            }\n        }\n    }\n\n    function _onFocus(e) {\n        e.currentTarget.type = \"date\";\n    }\n\n    function _onBlur(e) {\n        e.currentTarget.type = \"text\";\n    }\n\n    return (\n        <form onSubmit={addRelease} className=\"addReleaseForm\">\n            <div style={{ width: '38%' }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Version name\"\n                    className=\"versionName\"\n                    value={versionName}\n                    onChange={(e) => {\n                        setVersionName(e.target.value)\n                        setVersionNameError(false)\n                    }}\n                />\n                {\n                    versionNameError ? <div className=\"errorMesssage\">*Version name is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Start date\"\n                    className=\"startDate\"\n                    id=\"startDateId\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={startDate}\n                    onChange={(e) => {\n                        setStartDate(e.target.value)\n                        setStartDateError(false)\n                    }}\n                />\n                {\n                    startDateError ? <div className=\"errorMesssage\">*Start date is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    className=\"releaseDate\"\n                    placeholder=\"Release date\"\n                    id=\"releaseDateId\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={releaseDate}\n                    onChange={(e) => {\n                        setReleaseDate(e.target.value)\n                        setReleaseDateError(false)\n                    }}\n                />\n                {\n                    releaseDateError ? <div className=\"errorMesssage\">*Release date is required.</div> : null\n                }\n\n            </div>\n            <div style={{ width: '20%' }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    className=\"description\"\n                    value={description}\n                    onChange={(e) => {\n                        setDescription(e.target.value)\n                        setDescriptionError(false)\n                    }}\n                />\n                {\n                    descriptionError ? <div className=\"errorMesssage\">*Description is required.</div> : null\n                }\n            </div>\n            <button type=\"submit\" className=\"addButton\"> Add </button>\n        </form>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport \"./EditReleaseForm.css\";\n\nexport default function EditReleaseForm(props) {\n    const [versionName, setVersionName] = useState('')\n    const [versionNameError, setVersionNameError] = useState(false)\n    const [startDate, setStartDate] = useState('')\n    const [startDateError, setStartDateError] = useState(false)\n    const [releaseDate, setReleaseDate] = useState('')\n    const [releaseDateError, setReleaseDateError] = useState(false)\n    const [description, setDescription] = useState('')\n    const [descriptionError, setDescriptionError] = useState(false)\n    const [progress, setProgress] = useState(0)\n    const [progressError, setProgressError] = useState(false)\n\n    const editRelease = (e) => {\n        e.preventDefault();\n        if (versionName.length !== 0 && startDate.length !== 0 && releaseDate.length !== 0 && description.length !== 0 && Date.parse(startDate) <= Date.parse(releaseDate)) {\n\n            let updatedRelease = {\n                versionName,\n                startDate,\n                releaseDate,\n                description,\n                progress,\n                tasks: props.releases[props.index].tasks\n            }\n\n            props.releases[props.index] = updatedRelease\n\n            props.setReleases([...props.releases]);\n\n            setVersionName(\"\");\n            setStartDate(\"\");\n            setReleaseDate(\"\");\n            setDescription(\"\");\n            props.setShowReleaseEditModal();\n        }\n        else {\n            if (versionName.length === 0) {\n                setVersionNameError(true)\n            }\n            if (startDate.length === 0) {\n                setStartDateError(true)\n            }\n            if (releaseDate.length === 0) {\n                setReleaseDateError(true)\n            }\n            if (description.length === 0) {\n                setDescriptionError(true)\n            }\n            if (startDate.length !== 0 && releaseDate.length !== 0) {\n                if (Date.parse(startDate) > Date.parse(releaseDate)) {\n                    alert(\"Start date cannot be greater than release date.\")\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        setVersionName(props.currentRelease.versionName);\n        setStartDate(props.currentRelease.startDate);\n        setReleaseDate(props.currentRelease.releaseDate);\n        setDescription(props.currentRelease.description);\n        setProgress(props.currentRelease.progress);\n    }, [props.currentRelease.versionName, props.currentRelease.startDate, props.currentRelease.releaseDate, props.currentRelease.description, props.currentRelease.progress ])\n\n    function _onFocus(e) {\n        e.currentTarget.type = \"date\";\n    }\n\n    function _onBlur(e) {\n        e.currentTarget.type = \"text\";\n    }\n\n    return (\n        <form onSubmit={editRelease} className=\"addReleaseForm\">\n            <div style={{ width: '25%', marginRight: '5px' }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Version name\"\n                    className=\"versionName\"\n                    value={versionName}\n                    onChange={(e) => {\n                        setVersionName(e.target.value)\n                        setVersionNameError(false)\n                    }}\n                />\n                {\n                    versionNameError ? <div className=\"errorMesssage\">*Version name is required.</div> : null\n                }\n            </div>\n            <div style={{ marginRight: '5px'}}>\n                <input\n                    type=\"number\"\n                    min={0}\n                    max={100}\n                    placeholder=\"Progress\"\n                    className=\"versionName\"\n                    value={progress}\n                    onChange={(e) => {\n                        setProgress(e.target.value)\n                        setProgressError(false)\n                    }}\n                />\n                {\n                    progressError ? <div className=\"errorMesssage\">*Progress is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Start date\"\n                    className=\"startDate\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={startDate}\n                    onChange={(e) => {\n                        setStartDate(e.target.value)\n                        setStartDateError(false)\n                    }}\n                />\n                {\n                    startDateError ? <div className=\"errorMesssage\">*Start date is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    className=\"releaseDate\"\n                    placeholder=\"Release date\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={releaseDate}\n                    onChange={(e) => {\n                        setReleaseDate(e.target.value)\n                        setReleaseDateError(false)\n                    }}\n                />\n                {\n                    releaseDateError ? <div className=\"errorMesssage\">*Release date is required.</div> : null\n                }\n            </div>\n            <div style={{ width: '20%' }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    className=\"description\"\n                    value={description}\n                    onChange={(e) => {\n                        setDescription(e.target.value)\n                        setDescriptionError(false)\n                    }}\n                />\n                {\n                    descriptionError ? <div className=\"errorMesssage\">*Description is required.</div> : null\n                }\n            </div>\n            <button type=\"submit\" className=\"addButton\"> Save </button>\n        </form>\n    )\n}\n","import React, { useEffect, useState } from 'react';\n\nexport default function EditTaskForm(props) {\n    const [startDate, setStartDate] = useState('')\n    const [startDateError, setStartDateError] = useState(false)\n    const [endDate, setEndDate] = useState('')\n    const [releaseDateError, setReleaseDateError] = useState(false)\n    const [description, setDescription] = useState('')\n    const [descriptionError, setDescriptionError] = useState(false)\n    const [progress, setProgress] = useState(0)\n    const [progressError, setProgressError] = useState(false)\n\n    const editTask = (e) => {\n        e.preventDefault();\n        if (startDate.length !== 0 && endDate.length !== 0 && description.length !== 0 && Date.parse(startDate) <= Date.parse(endDate)) {\n\n            let updatedTask = {\n                id: props.currentTask,\n                startDate,\n                endDate,\n                description,\n                progress\n            }\n\n            props.releases[props.index].tasks[props.taskIndex] = updatedTask\n\n            props.setReleases([...props.releases]);\n\n            setStartDate(\"\");\n            setEndDate(\"\");\n            setDescription(\"\");\n            setProgress(\"\");\n            props.setShowEditTaskModal(false);\n        }\n        else {\n            \n            if (startDate.length === 0) {\n                setStartDateError(true)\n            }\n            if (endDate.length === 0) {\n                setReleaseDateError(true)\n            }\n            if (description.length === 0) {\n                setDescriptionError(true)\n            }\n            if (startDate.length !== 0 && endDate.length !== 0) {\n                if (Date.parse(startDate) > Date.parse(endDate)) {\n                    alert(\"Start date cannot be greater than end date.\")\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        setStartDate(props.currentTask.startDate);\n        setEndDate(props.currentTask.endDate);\n        setDescription(props.currentTask.description);\n        setProgress(props.currentTask.progress);\n    }, [props.currentTask.startDate, props.currentTask.endDate, props.currentTask.description, props.currentTask.progress])\n\n    function _onFocus(e) {\n        e.currentTarget.type = \"date\";\n    }\n\n    function _onBlur(e) {\n        e.currentTarget.type = \"text\";\n    }\n\n    return (\n        <form onSubmit={editTask} className=\"addReleaseForm\">\n            <div style={{ marginRight: '5px', width: '20%'}}>\n                <input\n                    type=\"number\"\n                    min={0}\n                    max={100}\n                    placeholder=\"Progress\"\n                    className=\"versionName\"\n                    value={progress}\n                    onChange={(e) => {\n                        setProgress(e.target.value)\n                        setProgressError(false)\n                    }}\n                />\n                {\n                    progressError ? <div className=\"errorMesssage\">*Progress is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Start date\"\n                    className=\"startDate\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={startDate}\n                    onChange={(e) => {\n                        setStartDate(e.target.value)\n                        setStartDateError(false)\n                    }}\n                />\n                {\n                    startDateError ? <div className=\"errorMesssage\">*Start date is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    className=\"releaseDate\"\n                    placeholder=\"End date\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={endDate}\n                    onChange={(e) => {\n                        setEndDate(e.target.value)\n                        setReleaseDateError(false)\n                    }}\n                />\n                {\n                    releaseDateError ? <div className=\"errorMesssage\">*Release date is required.</div> : null\n                }\n            </div>\n            <div style={{ width: '20%' }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    className=\"description\"\n                    value={description}\n                    onChange={(e) => {\n                        setDescription(e.target.value)\n                        setDescriptionError(false)\n                    }}\n                />\n                {\n                    descriptionError ? <div className=\"errorMesssage\">*Description is required.</div> : null\n                }\n            </div>\n            <button type=\"submit\" className=\"addButton\"> Save </button>\n        </form>\n    )\n}\n","import React, { useState } from 'react';\n\nexport default function CreateTaskForm(props) {\n    const [startDate, setStartDate] = useState('')\n    const [startDateError, setStartDateError] = useState(false)\n    const [endDate, setEndDate] = useState('')\n    const [releaseDateError, setReleaseDateError] = useState(false)\n    const [description, setDescription] = useState('')\n    const [descriptionError, setDescriptionError] = useState(false)\n    const [progress, setProgress] = useState(0)\n    const [progressError, setProgressError] = useState(false)\n\n    function makeid() {\n        var text = \"\";\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      \n        for (var i = 0; i < 5; i++)\n          text += possible.charAt(Math.floor(Math.random() * possible.length));\n      \n        return text;\n      }\n\n    const editTask = (e) => {\n        e.preventDefault();\n        if (startDate.length !== 0 && endDate.length !== 0 && description.length !== 0 && Date.parse(startDate) <= Date.parse(endDate)) {\n\n            let newTask = {\n                id: makeid(),\n                startDate,\n                endDate,\n                description,\n                progress\n            }\n\n            // props.releases[props.index].tasks.push(newTask)\n            props.releases[props.index].tasks = [...props.releases[props.index].tasks, newTask]\n\n            props.setReleases([...props.releases]);\n\n            setStartDate(\"\");\n            setEndDate(\"\");\n            setDescription(\"\");\n            setProgress(\"\");\n            props.setShowCreateTaskModal(false);\n            props.setShowReleaseTasks(true);\n        }\n        else {\n            \n            if (startDate.length === 0) {\n                setStartDateError(true)\n            }\n            if (endDate.length === 0) {\n                setReleaseDateError(true)\n            }\n            if (description.length === 0) {\n                setDescriptionError(true)\n            }\n            if (startDate.length !== 0 && endDate.length !== 0) {\n                if (Date.parse(startDate) > Date.parse(endDate)) {\n                    setStartDate(\"\");\n                    setEndDate(\"\");\n                    alert(\"Start date cannot be greater than end date.\")\n                }\n            }\n        }\n    }\n\n    function _onFocus(e) {\n        e.currentTarget.type = \"date\";\n    }\n\n    function _onBlur(e) {\n        e.currentTarget.type = \"text\";\n    }\n\n    return (\n        <form onSubmit={editTask} className=\"addReleaseForm\">\n            <div style={{ marginRight: '5px', width: '20%'}}>\n                <input\n                    type=\"number\"\n                    min={0}\n                    max={100}\n                    placeholder=\"Progress\"\n                    className=\"versionName\"\n                    value={progress}\n                    onChange={(e) => {\n                        setProgress(e.target.value)\n                        setProgressError(false)\n                    }}\n                />\n                {\n                    progressError ? <div className=\"errorMesssage\">*Progress is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Start date\"\n                    className=\"startDate\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={startDate}\n                    onChange={(e) => {\n                        setStartDate(e.target.value)\n                        setStartDateError(false)\n                    }}\n                />\n                {\n                    startDateError ? <div className=\"errorMesssage\">*Start date is required.</div> : null\n                }\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    className=\"releaseDate\"\n                    placeholder=\"End date\"\n                    onFocus={_onFocus}\n                    onBlur={_onBlur}\n                    value={endDate}\n                    onChange={(e) => {\n                        setEndDate(e.target.value)\n                        setReleaseDateError(false)\n                    }}\n                />\n                {\n                    releaseDateError ? <div className=\"errorMesssage\">*Release date is required.</div> : null\n                }\n            </div>\n            <div style={{ width: '20%' }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Description\"\n                    className=\"description\"\n                    value={description}\n                    onChange={(e) => {\n                        setDescription(e.target.value)\n                        setDescriptionError(false)\n                    }}\n                />\n                {\n                    descriptionError ? <div className=\"errorMesssage\">*Description is required.</div> : null\n                }\n            </div>\n            <button type=\"submit\" className=\"addButton\"> Save </button>\n        </form>\n    )\n}\n\n\n","import React, { useEffect, useRef, useState } from 'react';\nimport \"./ReleaseComponent.css\";\nimport { GrDrag } from \"react-icons/gr\";\nimport { BsThreeDots } from \"react-icons/bs\";\nimport Modal from 'react-modal';\nimport EditReleaseForm from '../EditReleaseForm/EditReleaseForm';\nimport EditTaskForm from '../EditTaskForm/EditTaskForm';\nimport CreateTaskForm from '../CreateTaskForm/CreateTaskForm';\n\nexport default function ReleaseComponent(props) {\n    const [showReleaseTasks, setShowReleaseTasks] = useState(false);\n    const [showEditTaskModal, setShowEditTaskModal] = useState(false);\n    const [showCreateTaskModal, setShowCreateTaskModal] = useState(false);\n    const [showActionMenu, setShowActionMenu] = useState(false);\n    const [showReleaseEditModal, setShowReleaseEditModal] = useState(false);\n    const [currentTaskIndex, setCurrentTaskIndex] = useState(null);\n\n    const ref = useRef();\n\n    useOnClickOutside(ref, () => setShowActionMenu(false));\n\n    const deleteRelease = () => {\n        setShowActionMenu(false);\n        let updatedReleasesList = props.releases.filter(data => data.versionName !== props.release.versionName)\n        props.setReleases(updatedReleasesList)\n    }\n\n    const onReleaseDragStart = (e, data) => {\n        e.dataTransfer.setData(\"text/plain\", JSON.stringify(data))\n    }\n\n    const onReleaseDragOver = (e) => {\n        e.preventDefault();\n    }\n\n    const onReleaseDrop = (e, msg) => {\n        let draggedData = JSON.parse(e.dataTransfer.getData(\"text\"));\n        let dropDataVersionName = e.currentTarget.children[1].innerText;\n        let dropDataDescription = e.currentTarget.children[6].innerText;\n\n        if (msg === \"dropped\") {\n            let updatedReleasesData = props.releases;\n\n            let draggedDataIndex = updatedReleasesData.findIndex((element) => element.versionName === draggedData.versionName && element.description === draggedData.description)\n            let dropDataIndex = updatedReleasesData.findIndex((element) => element.versionName === dropDataVersionName && element.description === dropDataDescription)\n\n            updatedReleasesData.splice(draggedDataIndex, 1)\n            // console.log(updatedReleasesData)\n            updatedReleasesData.splice(dropDataIndex, 0, draggedData)\n            // console.log(updatedReleasesData)\n            props.setReleases([...updatedReleasesData])\n            // console.log(props.releases)\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <tr\n                key={props.release.versionName}\n                style={{ cursor: \"pointer\" }}\n                onDragStart={(e) => onReleaseDragStart(e, props.release)}\n                draggable={true}\n                onDragOver={(e) => onReleaseDragOver(e)}\n                onDrop={(e) => onReleaseDrop(e, \"dropped\")}\n            >\n                <td><span className=\"moveIcon\"><GrDrag /></span> </td>\n                <td onClick={() => setShowReleaseTasks(!showReleaseTasks)}>{props.release.versionName}</td>\n                <td>\n                    <span style={props.release.progress === 0 ? { backgroundColor: \"rgb(203,230,250)\", fontSize: '15px', fontWeight: 'bold', color: 'rgb(58,79,102)' }\n                        : (props.release.progress > 0 && props.release.progress < 100) ?\n                            { backgroundColor: \"rgb(252,245,209)\", color: \"rgb(100,102,102)\", fontSize: '15px', fontWeight: 'bold' }\n                            : { backgroundColor: \"rgb(232,250,242)\", fontSize: '15px', fontWeight: 'bold', color: 'rgb(116,160,140)' }}>\n                        {\n                            props.release.progress === 0 ? \"INPROGRESS\"\n                                : (props.release.progress > 0 && props.release.progress < 100) ?\n                                    \"UNRELEASED\" : \"RELEASED\"\n                        }\n                    </span>\n                </td>\n                <td><progress value={props.release.progress} max={100} min={0}> </progress></td>\n                <td>{props.release.startDate}</td>\n                <td>{props.release.releaseDate}</td>\n                <td>{props.release.description}</td>\n                <td>\n                    <span className=\"actionsMenu\"\n                        onClick={() => setShowActionMenu(!showActionMenu)}\n                        ref={ref}\n                    ><BsThreeDots />\n                    </span>\n                    {\n                        showActionMenu ?\n                            <div className=\"actionMenu\" ref={ref}>\n                                <div className=\"eachTaskMenu\" onClick={() => {\n                                    setShowActionMenu(false)\n                                    setShowReleaseEditModal(true)\n                                }}>Edit</div>\n                                <div className=\"eachTaskMenu\" onClick={deleteRelease}>Delete</div>\n                                <div className=\"eachTaskMenu\" onClick={() => {\n                                    setShowActionMenu(false)\n                                    setShowCreateTaskModal(!showCreateTaskModal)\n                                }}>Create a task</div>\n                            </div>\n                            : null\n                    }\n                </td>\n            </tr>\n            {\n                showReleaseTasks ?\n                    props.release &&\n                        props.release.tasks &&\n                        props.release.tasks.length > 0 ?\n                        props.release.tasks.map((task, taskIndex) => {\n                            return <React.Fragment>\n                                <tr>\n                                    <td></td>\n                                    <td>Task {taskIndex + 1}</td>\n                                    <td><span style={task.progress === 0 ? { backgroundColor: \"rgb(203,230,250)\", fontSize: '15px', fontWeight: 'bold', color: 'rgb(58,79,102)' }\n                                        : (task.progress > 0 && task.progress < 100) ?\n                                            { backgroundColor: \"rgb(252,245,209)\", color: \"rgb(100,102,102)\", fontSize: '15px', fontWeight: 'bold' }\n                                            : { backgroundColor: \"rgb(232,250,242)\", fontSize: '15px', fontWeight: 'bold', color: 'rgb(116,160,140)' }}>\n                                        {\n                                            parseInt(task.progress) === 0 ? \"TO DO\"\n                                                : (parseInt(task.progress) > 0 && parseInt(task.progress) < 100) ?\n                                                    \"IN PROGRESS\" : \"DONE\"\n                                        }\n                                    </span></td>\n                                    <td><progress value={task.progress ? task.progress : 0} max={100} min={0}> </progress></td>\n                                    <td>{task.startDate ? task.startDate : \"\"}</td>\n                                    <td>{task.endDate ? task.endDate : \"\"}</td>\n                                    <td>{task.description ? task.description : \"\"}</td>\n                                    <td><button className=\"addButton\" onClick={() => {\n                                        setCurrentTaskIndex(taskIndex)\n                                        setShowEditTaskModal(!showEditTaskModal)}}>Edit</button></td>\n                                </tr>\n                            </React.Fragment>\n                        })\n                        : props.release && props.release.tasks && props.release.tasks.length === 0 ? <tr><td colSpan=\"8\">No tasks available</td></tr> : null\n                    : null\n            }\n\n            {\n                showEditTaskModal ?\n                    <Modal\n                        isOpen={showEditTaskModal}\n                        onRequestClose={() => setShowEditTaskModal(false)}\n                        style={{\n                            content: {\n                                top: '50%',\n                                left: '50%',\n                                right: 'auto',\n                                bottom: 'auto',\n                                marginRight: '-50%',\n                                transform: 'translate(-50%, -50%)',\n                                width: '95vw'\n                            }\n                        }}\n                    >\n                        <EditTaskForm\n                            currentRelease={props.release}\n                            releases={props.releases}\n                            setReleases={props.setReleases}\n                            taskIndex={currentTaskIndex}\n                            index={props.index}\n                            currentTask={props.release.tasks[currentTaskIndex]}\n                            setShowEditTaskModal={() => setShowEditTaskModal(false)}\n                        />\n\n                    </Modal>\n                    : null\n            }\n\n            {\n                showReleaseEditModal ?\n                    <Modal\n                        isOpen={showReleaseEditModal}\n                        onRequestClose={() => setShowReleaseEditModal(false)}\n                        style={{\n                            content: {\n                                top: '50%',\n                                left: '50%',\n                                right: 'auto',\n                                bottom: 'auto',\n                                marginRight: '-50%',\n                                transform: 'translate(-50%, -50%)',\n                                width: '95vw'\n                            }\n                        }}\n                    >\n                        <EditReleaseForm\n                            setReleases={props.setReleases}\n                            releases={props.releases}\n                            index={props.index}\n                            currentRelease={props.release}\n                            setShowReleaseEditModal={() => setShowReleaseEditModal(false)}\n                        />\n\n                    </Modal>\n                    : null\n            }\n\n            {\n                showCreateTaskModal ?\n                    <Modal\n                        isOpen={showCreateTaskModal}\n                        onRequestClose={() => setShowCreateTaskModal(false)}\n                        style={{\n                            content: {\n                                top: '50%',\n                                left: '50%',\n                                right: 'auto',\n                                bottom: 'auto',\n                                marginRight: '-50%',\n                                transform: 'translate(-50%, -50%)',\n                                width: '95vw'\n                            }\n                        }}\n                    >\n                        <CreateTaskForm\n                            setShowReleaseTasks={setShowReleaseTasks}\n                            setReleases={props.setReleases}\n                            releases={props.releases}\n                            index={props.index}\n                            currentRelease={props.release}\n                            setShowCreateTaskModal={() => setShowCreateTaskModal(false)}\n                        />\n\n                    </Modal>\n                    : null\n            }\n        </React.Fragment >\n    )\n}\n\n\nfunction useOnClickOutside(ref, handler) {\n    useEffect(\n        () => {\n            const listener = event => {\n                if (!ref.current || ref.current.contains(event.target)) {\n                    return;\n                }\n\n                handler(event);\n            };\n\n            document.addEventListener('mousedown', listener);\n\n            return () => {\n                document.removeEventListener('mousedown', listener);\n            };\n        }\n        , [ref, handler]\n    )\n}\n","import React, { useState } from 'react';\nimport CreateReleaseForm from '../CreateReleaseForm/CreateReleaseForm';\nimport ReleaseComponent from '../ReleaseComponent/ReleaseComponent';\nimport './ReleaseContainer.css';\n\nexport default function ReleaseContainer() {\n    const [releases, setReleases] = useState([])\n\n    return (\n        <div className=\"releaseContainer\">\n            <div className=\"tableWrap\">\n                <table className=\"tableBodyScroll\">\n                    <thead>\n                        <tr className=\"tableHead\">\n                            <th>{\" \"}</th>\n                            <th>Version</th>\n                            <th>Status</th>\n                            <th>Progress</th>\n                            <th>Start date</th>\n                            <th>Release date</th>\n                            <th>Description</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            releases.map((release, index) => (\n                                <ReleaseComponent\n                                    setReleases={setReleases}\n                                    releases={releases}\n                                    release={release}\n                                    index={index}\n                                    key={index}\n                                />\n                            ))\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n            <CreateReleaseForm setReleases={setReleases} releases={releases} />\n\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ReleaseContainer from './components/ReleaseContainer/ReleaseContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ReleaseContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}